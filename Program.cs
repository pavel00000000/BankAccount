//Команда должна состоять из 2-3 человек.
//Создайте публичный репозиторий на GitHub для вашего проекта.
//Разработайте класс BankAccount, который будет представлять банковский счет с полями: номер счета, баланс и владелец счета.
//Создайте класс Bank, который будет отвечать за управление банковскими счетами: открытие новых счетов, пополнение счетов, списание средств, переводы между счетами и вывод информации о счетах.
//Реализуйте консольный интерфейс для взаимодействия с пользователями. Приложение должно предоставлять следующие команды:
//"Создать счет" - создание нового банковского счета с указанием номера счета и имени владельца.
//"Пополнить счет" - пополнение баланса счета по его номеру.
//"Снять со счета" - списание средств со счета по его номеру.
//"Перевести средства" - перевод денег с одного счета на другой с указанием номеров счетов.
//"Показать информацию о счете" - вывод информации о банковском счете по его номеру.
//"Выход" - завершение работы приложения.
//Каждое изменение в состоянии банковских счетов должно быть сохранено в файле (например, в формате JSON) с использованием библиотеки для работы с файлами, такой как System.IO.
//При запуске приложения, оно должно загружать ранее сохраненное состояние счетов из файла (если такой файл есть) и предоставлять возможность продолжить работу с ними.
//Бонусные задания:

//Реализуйте возможность удаления счетов.
//Добавьте проверку на недостаточность средств при списании.
//Обеспечьте валидацию вводимых данных пользователя и информативные сообщения об ошибках. разбей задачу на полдзадачи

//Разбивка задачи на подзадачи:

//Инициализация проекта:

//Создать новый репозиторий на GitHub.
//Инициализировать новый проект на C# с консольным приложением.
//Загрузить начальный проект в репозиторий.
//Создание основных классов:

//Создать класс BankAccount с полями: номер счета, баланс и владелец счета.
//Создать класс Bank с методами: открытие нового счета, пополнение счета, списание средств со счета, перевод между счетами и вывод информации о счете.
//Реализация консольного интерфейса:

//Разработать простой интерфейс, который позволит пользователю вводить команды.
//Имплементировать команды: "Создать счет", "Пополнить счет", "Снять со счета", "Перевести средства", "Показать информацию о счете", "Выход".
//Работа с файлами:

//Используя библиотеку System.IO, реализовать функцию для сохранения текущего состояния всех счетов в файл в формате JSON при каждом их изменении.
//Реализовать функцию, которая загружает сохраненное состояние счетов из файла при запуске приложения.
//Бонусные задания:

//Добавить в класс Bank метод для удаления счета.
//Добавить проверку на недостаточность средств на счете перед списанием.
//Реализовать функцию валидации вводимых данных пользователя и вывода информативных сообщений об ошибках.
//Тестирование и отладка:

//Протестировать все функции приложения, убедиться, что они работают корректно.
//Исправить обнаруженные ошибки.
//Документация:

//Описать все функции и методы в коде.
//Написать README файл с описанием приложения и инструкциями по его использованию.
//Завершающий этап:

//Сделать коммит и push всех изменений в репозиторий на GitHub.
//Проверить, что все требования задачи выполнены.
//Помните, что важно регулярно делать коммиты в репозиторий и пушить изменения, чтобы сохранять прогресс работы и иметь возможность откатиться к предыдущим версиям кода, если это потребуется.